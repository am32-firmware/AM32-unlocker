# unlock for openocd for AT32F421 MCUs
source [find target/at32f421xx.cfg]

set FLASH_STS 0x4002200C
set FLASH_CTRL 0x40022010
set CRM_CTRL 0x40021000

set USD_FAP 0x1FFFF800
set USER 0x1FFFF804
set EPP0 0x1FFFF808
set EPP1 0x1FFFF80A
set EPP2 0x1FFFF80C
set EPP3 0x1FFFF80E

if { ![info exists BOOTLOADER] } {
   # default for convenience for testing    
set BOOTLOADER "bootloaders/AM32_F421_B      OOTLOADER_PA2_V12.bin"
}

echo "Using bootloader $BOOTLOADER"


proc show_register { register } {
     set v [mrw $register]
     echo "reg [format 0x%08x $register] [format 0x%08x $v]"
}

proc at32f421_disable_write_protection {} {
# with thanks to https://github.com/gipsa-lab-uav/AM32_Arterytek/blob/master/doc/at32_utils.tcl
    set AT32_FLASH_BANK1_REG_1 0x40022000
    set AT32_USD_ADDR_1 0x1FFFF800
    set KEY1 0x45670123
    set KEY2 0xCDEF89AB
    set AT32_FLASH_PSR_OFFSET             0x00
    set AT32_FLASH_UNLOCK_OFFSET          0x04
    set AT32_FLASH_USD_UNLOCK_OFFSET      0x08
    set AT32_FLASH_STS_OFFSET             0x0C
    set AT32_FLASH_CTRL_OFFSET            0x10
    set AT32_FLASH_ADDR_OFFSET            0x14
    set AT32_FLASH_USD_OFFSET             0x1C
    set AT32_FLASH_EPPS_OFFSET            0x20
    set AT32_FLASH_EPPS1_OFFSET           0x2C
    
    reset halt
    wait_halt

    at32f421xx.cpu write_memory [expr $AT32_FLASH_BANK1_REG_1+$AT32_FLASH_UNLOCK_OFFSET] 32 $KEY1
    at32f421xx.cpu write_memory [expr $AT32_FLASH_BANK1_REG_1+$AT32_FLASH_UNLOCK_OFFSET] 32 $KEY2
    at32f421xx.cpu write_memory [expr $AT32_FLASH_BANK1_REG_1+$AT32_FLASH_USD_UNLOCK_OFFSET] 32 $KEY1
    at32f421xx.cpu write_memory [expr $AT32_FLASH_BANK1_REG_1+$AT32_FLASH_USD_UNLOCK_OFFSET] 32 $KEY2

    at32f421xx.cpu write_memory [expr $AT32_FLASH_BANK1_REG_1+$AT32_FLASH_CTRL_OFFSET] 32 0x220
    at32f421xx.cpu write_memory [expr $AT32_FLASH_BANK1_REG_1+$AT32_FLASH_CTRL_OFFSET] 32 0x260
    
    sleep 1000
    
    at32f421xx.cpu write_memory [expr $AT32_FLASH_BANK1_REG_1+$AT32_FLASH_UNLOCK_OFFSET] 32 $KEY1
    at32f421xx.cpu write_memory [expr $AT32_FLASH_BANK1_REG_1+$AT32_FLASH_UNLOCK_OFFSET] 32 $KEY2
    at32f421xx.cpu write_memory [expr $AT32_FLASH_BANK1_REG_1+$AT32_FLASH_USD_UNLOCK_OFFSET] 32 $KEY1
    at32f421xx.cpu write_memory [expr $AT32_FLASH_BANK1_REG_1+$AT32_FLASH_USD_UNLOCK_OFFSET] 32 $KEY2

    at32f421xx.cpu write_memory [expr $AT32_FLASH_BANK1_REG_1+$AT32_FLASH_CTRL_OFFSET] 32 0x210
    at32f421xx.cpu write_memory [expr $AT32_USD_ADDR_1] 16 0xA5
    at32f421xx.cpu write_memory [expr $AT32_USD_ADDR_1+2] 16 0xFF
    at32f421xx.cpu write_memory [expr $AT32_USD_ADDR_1+4] 16 0xFF
    at32f421xx.cpu write_memory [expr $AT32_USD_ADDR_1+6] 16 0xFF
    at32f421xx.cpu write_memory [expr $AT32_USD_ADDR_1+8] 16 0xFF
    at32f421xx.cpu write_memory [expr $AT32_USD_ADDR_1+10] 16 0xFF
    at32f421xx.cpu write_memory [expr $AT32_USD_ADDR_1+12] 16 0xFF
    at32f421xx.cpu write_memory [expr $AT32_USD_ADDR_1+14] 16 0xFF
    at32f421xx.cpu write_memory [expr $AT32_FLASH_BANK1_REG_1+$AT32_FLASH_CTRL_OFFSET] 32 0x80

    sleep 1000
    
    reset halt
}

init
reset halt

at32f421_disable_write_protection

show_register $FLASH_CTRL
show_register $FLASH_STS
show_register $CRM_CTRL

show_register $USD_FAP
show_register $USER
show_register $EPP0
show_register $EPP2

init
reset
halt

echo "erase 4 bootloader sectors and first fw sector"
flash erase_sector 0 0 4

echo "Load bootloader"
flash write_bank 0 $BOOTLOADER

echo "verify bootloader"
flash verify_bank 0 $BOOTLOADER

echo "Success!"
exit
